---
- name: Install rsync to create backups.
  apt: "name=rsync state=present"

- name: Specify the jenkins user with a custom home.
  user:
    name: jenkins
    home: "{{ jenkins_user_home }}"
    comment: Jenkins
    system: yes
    shell: /bin/bash

- name: Change the password for the jenkins user.
  user:
    name: jenkins
    password: "{{ jenkins_user_password | password_hash('sha512') }}"
    update_password: always
  no_log: yes
  when:
    - jenkins_user_password != ""

- name: Add Key for Jenkins Debian Repository
  apt_key:
    url: https://pkg.jenkins.io/debian/jenkins.io.key
    state: present

- name: Add Repository for Jenkins
  apt_repository:
    repo: deb https://pkg.jenkins.io/debian binary/
    state: present
    update_cache: yes

  # This needs to be done manually as it can take a while before the
  # directories are created by the Jenkins installation.
- name: Create Jenkins userContent directory
  file:
    dest: "{{ jenkins_home }}/userContent"
    state: directory
    owner: jenkins
    group: jenkins
    recurse: yes

  # Jobs can use a shared style sheet, see https://confluence.catrob.at/x/SYFYAQ
- name: Place a link to the job style in the user content directory.
  file:
    src: "{{ catroid_user_home }}/Jenkins/css/job_styles.css"
    dest: "{{ jenkins_home }}/userContent/job_styles.css"
    owner: jenkins
    group: jenkins
    state: link

- name: Install Jenkins
  apt: "name=jenkins state=present"
  environment:
    RUNLEVEL: "1" # to not start jenkins directly

- name: Change Jenkins Defaults
  ini_file:
    section: null
    dest: /etc/default/jenkins
    no_extra_spaces: yes
    backup: yes
    option: JENKINS_HOME
    value: "{{ jenkins_home }}"
  notify: restart jenkins

- name: Ensure Jenkins is using the updated defaults.
  meta: flush_handlers

- name: Ensure Jenkins is started and enabled on boot.
  service: name=jenkins state=started enabled=yes

- name: Determine Jenkins credentials to install plugins.
  jenkins_credentials:
    user: "{{ ldap_user }}"
    password: "{{ ldap_password }}"
    jenkins_home: "{{ jenkins_home }}"
  no_log: Yes
  register: credentials

- name: Install plugin
  jenkins_plugin:
    name: "{{ item }}"
    params:
      url: "{{ jenkins_url }}"
      url_username: "{{ credentials['user'] }}"
      url_password: "{{ credentials['password'] }}"
    jenkins_home: "{{ jenkins_home }}"
    timeout: 60
  no_log: Yes
  notify: restart jenkins
  with_items:
    - android-emulator
    - android-lint
    - antisamy-markup-formatter # allows html descriptions for plugins
    - blue                      # blue-ocean
    - build-name-setter
    - build-timeout
    - checkstyle                # Collects checkstyle static analysis results
    - ghprb                     # github PR support
    - git
    - gradle
    - greenballs                # instead of blue
    - jenkins-multijob-plugin   # Job that consists of other jobs
    - job-dsl                   # Support for a DSL to describe jobs
    - jobConfigHistory          # diff changes in job config
    - lockable-resources        # Locking resources on node (eg: manipulate android SDK)
    - parallel-test-executor    # Distribute tests onto multiple nodes for better performance
    - pmd                       # Collects PMD static analysis results
    - rebuild                   # adds a rebuild button to jobs
    - slack                     # allows to send slack notifications
    - ssh-slaves                # to connect to slaves via ssh
    - timestamper               # add timestamps in the log automatically
    - thin-backup               # backs up the global and job config (no archive or workspace)
    - workflow-aggregator       # Support for Jenkins Pipeline
    - ws-cleanup                # Clean the workspace for builds
    - xvnc                      # So we do not rely on an active X-Session
  when:
    - install_plugins

- name: Ensure Jenkins is using the updated defaults.
  meta: flush_handlers

- name: Configuring Jenkins.
  jenkins_script:
    script: "{{ lookup('file', 'config.groovy') }}"
    user: "{{ credentials['user'] }}"
    password: "{{ credentials['password'] }}"
    url: "{{ jenkins_url }}"
  register: script_result
  changed_when: "'changed:' in script_result.output"
  notify: restart jenkins
  when:
    - configure_jenkins
